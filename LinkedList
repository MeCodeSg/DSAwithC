                // Single LL //

#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <malloc.h>

struct node {
    int data;
    struct node *next;
};
struct node* start=NULL;
struct node* createLL(struct node *, int[]);
void display(struct node *);
struct node * insert_beg(struct node * start, int num);
struct node * insert_end(struct node * start, int num);
struct node * insert_before(struct node * start, int num, int val);
struct node * insert_after(struct node * start, int num, int val);
struct node * delete_beg(struct node * start);
struct node * delete_end(struct node * start);
struct node * delete_node(struct node * start, int val);
struct node * delete_after(struct node * start, int val);
struct node * delete_list(struct node * start);
struct node * sort(struct node * start);

int main() {
    int arr[7]={3, 6, 24, 65, 1, 76, 35};
    start=createLL(start, arr);
    display(start);
    printf("\n");
    start=insert_beg(start, 88);
    display(start);
    printf("\n");
    start=insert_end(start, 100);
    display(start);
    printf("\n");
    start=sort(start);
    display(start);
    getch();
    return 0;
}
struct node * createLL(struct node *start, int arr[]) {
    struct node* new_node;
    struct node* ptr;
    int i=0;
    int num=arr[i];
    // printf("\n Enter data: ");
    // scanf("%d", &num);
    while(i<7) {
        new_node=(struct node*)malloc(sizeof(struct node));
        new_node->data=num;
        if(start==NULL) {
            new_node->next=NULL;
            start=new_node;
        } else {
            ptr=start;
            while(ptr->next!=NULL) {
                ptr=ptr->next;
            }
            ptr->next=new_node;
            new_node->next=NULL;
        }
        // printf("\n Enter data: ")
        // scanf("%d", num);
        i++;
        num=arr[i];
        
    }
    return start;
}
void display(struct node * start) {
    struct node* ptr=start;
    while(ptr!=NULL) {
        printf("%d  ", ptr->data);
        ptr=ptr->next;
    }
}
struct node * insert_beg(struct node * start, int num) {
    struct node * new_node=(struct node*)malloc(sizeof(struct node));
    new_node->data=num;
    new_node->next=start;
    return new_node;
}
struct node * insert_end(struct node * start, int num) {
    struct node * ptr;
    struct node * new_node;
    new_node=(struct node*)malloc(sizeof(struct node));
    new_node->data=num;
    new_node->next=NULL;
    ptr=start;
    while(ptr->next!=NULL) {
        ptr=ptr->next;
    }
    ptr->next=new_node;

    return start;
}
struct node * insert_before(struct node * start, int num, int val) {
    struct node * ptr;
    struct node * new_node;
    struct node * preptr;
    new_node=(struct node*)malloc(sizeof(struct node));
    new_node->data=num;
    ptr=start;
    while(ptr->data!=val) {
        preptr=ptr;
        ptr=ptr->next;
    }
    preptr->next=new_node;
    new_node->next=ptr;
    return start;
}
struct node * insert_after(struct node * start, int num, int val) {
    struct node * ptr;
    struct node * new_node;
    new_node=(struct node*)malloc(sizeof(struct node));
    new_node->data=num;
    ptr=start;
    while(ptr->data!=val) {
        ptr=ptr->next;
    }
    new_node->next=ptr->next;
    ptr->next=new_node;
    return start;
}
struct node * delete_beg(struct node * start) {
    struct node * ptr=start;
    start=start->next;
    free(ptr);
    return start;
}
struct node * delete_end(struct node * start) {
    struct node * preptr;
    struct node * ptr=start;
    while(ptr->next!=NULL) {
        preptr=ptr;
        ptr=ptr->next;
    }
    preptr->next=NULL;
    free(ptr);
    return start;
}
struct node * delete_node(struct node * start, int val) {
    struct node * preptr;
    struct node * ptr=start;
    if(ptr->data==val) {
        start=delete_beg(start);
        return start;
    } else {
        while(ptr->data!=val) {
            preptr=ptr;
            ptr=ptr->next;
        }
        preptr->next=ptr->next;
        free(ptr);
        return start;
    }
}
struct node * delete_after(struct node * start, int val) {
    struct node * ptr=start;
    struct node * preptr;
    while(preptr->data!=val) {
        preptr=ptr;
        ptr=ptr->next;
    }
    preptr->next=ptr->next;
    free(ptr);
    return start;
}
struct node * delete_list(struct node * start) {
    struct node * ptr;
    if(start!=NULL) {
        ptr=start;
        while(ptr!=NULL) {
            start=delete_beg(ptr);
            ptr=start;
        }
    }
    return start;
}
struct node * sort(struct node * start) {
    struct node * ptr1=start;
    struct node * ptr2;
    while(ptr1->next!=NULL) {
        ptr2=ptr1->next;
        while(ptr2!=NULL) {
            if(ptr1->data>ptr2->data) {
                int temp=ptr1->data;
                ptr1->data=ptr2->data;
                ptr2->data=temp;
            }
            ptr2=ptr2->next;
        }
        ptr1=ptr1->next;
    }
    return start;
}

                    // CircularLL //

#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <malloc.h>

struct node {
    int data;
    struct node *next;
};
struct node* start=NULL;
struct node* createLL(struct node *, int[]);
void display(struct node *);
struct node * insert_beg(struct node * start, int num);
struct node * insert_end(struct node * start, int num);
struct node * insert_before(struct node * start, int num, int val);
struct node * insert_after(struct node * start, int num, int val);
struct node * delete_beg(struct node * start);
struct node * delete_end(struct node * start);
struct node * delete_node(struct node * start, int val);
struct node * delete_after(struct node * start, int val);
struct node * delete_list(struct node * start);
struct node * sort(struct node * start);

int main() {
    int arr[7]={3, 6, 24, 65, 1, 76, 35};
    start=createLL(start, arr);
    display(start);
    printf("\n");
    start=insert_beg(start, 88);
    display(start);
    printf("\n");
    start=insert_end(start, 100);
    display(start);
    printf("\n");
    start=sort(start);
    display(start);
    getch();
    return 0;
}
struct node * createLL(struct node *start, int arr[]) {
    struct node* new_node;
    struct node* ptr;
    int i=0;
    int num=arr[i];
    // printf("\n Enter data: ");
    // scanf("%d", &num);
    while(i<7) {
        new_node=(struct node*)malloc(sizeof(struct node));
        new_node->data=num;
        if(start==NULL) {
            new_node->next=NULL;
            start=new_node;
        } else {
            ptr=start;
            while(ptr->next!=NULL) {
                ptr=ptr->next;
            }
            ptr->next=new_node;
            new_node->next=NULL;
        }
        // printf("\n Enter data: ")
        // scanf("%d", num);
        i++;
        num=arr[i];
        
    }
    return start;
}
void display(struct node * start) {
    struct node* ptr=start;
    while(ptr!=NULL) {
        printf("%d  ", ptr->data);
        ptr=ptr->next;
    }
}
struct node * insert_beg(struct node * start, int num) {
    struct node * new_node=(struct node*)malloc(sizeof(struct node));
    new_node->data=num;
    new_node->next=start;
    return new_node;
}
struct node * insert_end(struct node * start, int num) {
    struct node * ptr;
    struct node * new_node;
    new_node=(struct node*)malloc(sizeof(struct node));
    new_node->data=num;
    new_node->next=NULL;
    ptr=start;
    while(ptr->next!=NULL) {
        ptr=ptr->next;
    }
    ptr->next=new_node;

    return start;
}
struct node * insert_before(struct node * start, int num, int val) {
    struct node * ptr;
    struct node * new_node;
    struct node * preptr;
    new_node=(struct node*)malloc(sizeof(struct node));
    new_node->data=num;
    ptr=start;
    while(ptr->data!=val) {
        preptr=ptr;
        ptr=ptr->next;
    }
    preptr->next=new_node;
    new_node->next=ptr;
    return start;
}
struct node * insert_after(struct node * start, int num, int val) {
    struct node * ptr;
    struct node * new_node;
    new_node=(struct node*)malloc(sizeof(struct node));
    new_node->data=num;
    ptr=start;
    while(ptr->data!=val) {
        ptr=ptr->next;
    }
    new_node->next=ptr->next;
    ptr->next=new_node;
    return start;
}
struct node * delete_beg(struct node * start) {
    struct node * ptr=start;
    start=start->next;
    free(ptr);
    return start;
}
struct node * delete_end(struct node * start) {
    struct node * preptr;
    struct node * ptr=start;
    while(ptr->next!=NULL) {
        preptr=ptr;
        ptr=ptr->next;
    }
    preptr->next=NULL;
    free(ptr);
    return start;
}
struct node * delete_node(struct node * start, int val) {
    struct node * preptr;
    struct node * ptr=start;
    if(ptr->data==val) {
        start=delete_beg(start);
        return start;
    } else {
        while(ptr->data!=val) {
            preptr=ptr;
            ptr=ptr->next;
        }
        preptr->next=ptr->next;
        free(ptr);
        return start;
    }
}
struct node * delete_after(struct node * start, int val) {
    struct node * ptr=start;
    struct node * preptr;
    while(preptr->data!=val) {
        preptr=ptr;
        ptr=ptr->next;
    }
    preptr->next=ptr->next;
    free(ptr);
    return start;
}
struct node * delete_list(struct node * start) {
    struct node * ptr;
    if(start!=NULL) {
        ptr=start;
        while(ptr!=NULL) {
            start=delete_beg(ptr);
            ptr=start;
        }
    }
    return start;
}
struct node * sort(struct node * start) {
    struct node * ptr1=start;
    struct node * ptr2;
    while(ptr1->next!=NULL) {
        ptr2=ptr1->next;
        while(ptr2!=NULL) {
            if(ptr1->data>ptr2->data) {
                int temp=ptr1->data;
                ptr1->data=ptr2->data;
                ptr2->data=temp;
            }
            ptr2=ptr2->next;
        }
        ptr1=ptr1->next;
    }
    return start;
}

                    // Doubly LL //

